set nocompatible
filetype plugin indent on

" Theme
syntax on
set background=dark  " dark or light

colorscheme off

" Nice alternative:
" colorscheme one
" let g:airline_theme='one'

" Writing
let g:pencil#wrapModeDefault = 'soft'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init() | setl spell
  autocmd FileType text         call pencil#init() | setl spell
  autocmd FileType tex          call pencil#init() | setl spell
augroup END

" Autosave
let g:autosave_timer = 15 "seconds

" Line numbering
"set cursorline!
set rnu
set nu

" <C-a> and <C-x> assume decimal (not octal):
set nrformats=

" Case insenstive search
set ignorecase
set smartcase

" Escape to turn off search highlighting: https://stackoverflow.com/a/1037182
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" Tab completion like bash
set wildmode=longest,list

" FZF
nmap <C-p> :FZF<CR>
set rtp+=/usr/local/opt/fzf

" ag
let g:ackprg = 'ag --nogroup --nocolor --column'
nmap <leader>f :Ack!<CR>      " Search using word under cursor
map <leader>d :Ack! ""<left>
" let g:ackpreview = 1

" Status line
set laststatus=2
set noshowmode    " Hide -- INSERT -- as it is handled by Airloine or Lightline

" Lightline (https://github.com/itchyny/lightline.vim)

" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#tabline#enabled = 1     " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " Show just the filename
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_section_z = '%4l/%L :%3v'

" Buffer management
nmap <C-L> :bnext<CR>
nmap <BS> :bprevious<CR> " neovim
nmap  :bprevious<CR>   " vim

nnoremap <silent> <Leader>w :Bclose<CR>
nmap Q :Bclose<CR>

set hidden

" Window mangagement
map <leader>l <C-W>l
map <leader>h <C-W>h
map <leader>j <C-W>j
map <leader>k <C-W>k

nmap <C-K> <C-W>k
nmap <C-J> <C-W>j

" Gitgutter
" Unmap ,h commands to avoid delay with window ,h movement
let g:gitgutter_map_keys = 0

" Moving lines
nmap ˚ :m -2<CR> " alt+k
nmap ∆ :m +1<CR> " alt+j

" Nerd tree
nmap <silent> <C-\> :NERDTreeToggle<CR>
nmap <Leader>\ :NERDTreeFind<CR>

" File Beagle
" https://github.com/jeetsukumaran/vim-filebeagle
let g:filebeagle_suppress_keymaps = 1
map <silent> - <Plug>FileBeagleOpenCurrentBufferDir

" Tabs
set tabstop=2       " number of visual spaces per TAB
set shiftwidth=2    " size of an indent
set softtabstop=2   " number of spaces in tab when editing
set expandtab       " tabs are spaces

" Save file settings
map <Leader>s :w<CR>
imap \; <ESC>:w<CR>
map <Leader>S :wa<CR>

map <C-S> :w<CR>
imap <C-S> <ESC>:w<CR>

" Rust
" let g:rustfmt_autosave = 1

" Scala plugin
" The syntastic scala checkers are too slow for me:
let g:syntastic_scala_checkers = []

let g:syntastic_full_redraws=0 " Flickering screen fix?
let g:syntastic_ignore_files = ['\m\.sbt$']

" Move swap files out of working directories
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" https://github.com/pjrt/stags
function! QualifiedTagJump() abort
  let l:plain_tag = expand("<cword>")
  let l:orig_keyword = &iskeyword
  set iskeyword+=\.
  let l:word = expand("<cword>")
  let &iskeyword = l:orig_keyword

  let l:splitted = split(l:word, '\.')
  let l:acc = []
  for wo in l:splitted
    let l:acc = add(l:acc, wo)
    if wo ==# l:plain_tag
      break
    endif
  endfor

  let l:combined = join(l:acc, ".")
  try
    execute "ta " . l:combined
  catch /.*E426.*/ " Tag not found
    execute "ta " . l:plain_tag
  endtry
endfunction

nnoremap <silent> <C-]> :<C-u>call QualifiedTagJump()<CR>

" https://github.com/rust-lang/rust.vim
let g:rustfmt_autosave = 1

