set nocompatible
filetype plugin indent on

execute pathogen#infect()

" Theme
syntax on
set background=light  " dark or light

colorscheme off

" Writing
let g:pencil#wrapModeDefault = 'soft'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init() | setl spell
  autocmd FileType text         call pencil#init() | setl spell
  autocmd FileType tex          call pencil#init() | setl spell
augroup END

" Line numbering
"set cursorline!
set rnu
set nu

" Keys
let maplocalleader = "\\"
let mapleader = ","

" <C-a> and <C-x> assume decimal (not octal):
set nrformats=

" FZF
nmap <C-p> :FZF<CR>

" ag
let g:ackprg = 'ag --nogroup --nocolor --column'
nmap <leader>f :Ack<CR> " Grep using word under cursor
" let g:ackpreview = 1

" Airline
set laststatus=2
set noshowmode
let g:airline_powerline_fonts = 1

let g:airline#extensions#syntastic#enabled = 1

let g:airline#extensions#tabline#enabled = 1     " Enable the list of buffers
let g:airline#extensions#tabline#fnamemod = ':t' " Show just the filename
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

let g:airline_section_z = '%4l/%L :%3v'

" Buffer management
nmap <leader>l :bnext<CR>
nmap <leader>h :bprevious<CR>
nmap <leader>b :ls<CR>
nnoremap <silent> <Leader>w :Bclose<CR>
set hidden

" Window mangagement
map <C-L> <C-W>l
map <BS> <C-W>h
map <C-J> <C-W>j
map <C-K> <C-W>k

" Gitgutter
" Unmap ,h commands to avoid delay with buffer ,h movement
let g:gitgutter_map_keys = 0

" Moving lines
nmap ˚ :m -2<CR> " alt+k
nmap ∆ :m +1<CR> " alt+j

" Nerd tree
nmap <silent> <C-\> :NERDTreeToggle<CR>
nmap <Leader>\ :NERDTreeFind<CR>

" Tabs
set tabstop=2       " number of visual spaces per TAB
set shiftwidth=2    " size of an indent
set softtabstop=2   " number of spaces in tab when editing
set expandtab       " tabs are spaces

" Save file settings
map <Leader>s :w<CR>
map <Leader>S :wa<CR>

" ENSIME Settings
au FileType scala nnoremap <LocalLeader>g :EnDeclaration<CR>
au FileType scala nnoremap <LocalLeader>G :EnDeclarationSplit<CR>
au FileType scala nnoremap <LocalLeader>t :EnType<CR>
au FileType scala nnoremap <LocalLeader>T :EnTypeCheck<CR>
" au BufWritePost *.scala :EnTypeCheck
let g:syntastic_full_redraws=0 " Flickering screen fix?
let g:syntastic_ignore_files = ['\m\.sbt$']

" https://github.com/aloiscochard/sarsi
"call rpcstart('sarsi-nvim')

" NVIM terminal
tnoremap <Esc> <C-\><C-n>

" GO
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

